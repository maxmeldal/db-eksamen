<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.4.xsd">
    <preConditions>
        <dbms type="postgresql"/>
    </preConditions>
    <changeSet id="1.0.0:dbeksamen:set_up_stored_procedures" author="MTM">
        <createProcedure>
            CREATE OR REPLACE FUNCTION increment_user_experience() RETURNS TRIGGER
                LANGUAGE plpgsql
                AS $$
                    BEGIN
                        UPDATE users SET experience = experience + 10 WHERE id = NEW.user_id;
                        RETURN NEW;
                    END $$;

            CREATE TRIGGER on_insert_post_update_user_experience
                AFTER INSERT ON posts
                FOR EACH ROW EXECUTE PROCEDURE increment_user_experience();
        </createProcedure>
        <createProcedure>
            CREATE OR REPLACE FUNCTION calculate_user_level() RETURNS TRIGGER
                LANGUAGE plpgsql
                AS $$
                    BEGIN
                        UPDATE users SET level = FLOOR(0.4 * SQRT(NEW.experience)) WHERE id = NEW.id;
                        RETURN NEW;
                    END $$;

            CREATE TRIGGER on_update_users_set_user_level
                AFTER UPDATE OF experience ON users
                FOR EACH ROW EXECUTE PROCEDURE calculate_user_level();
        </createProcedure>
        <createProcedure>
            CREATE OR REPLACE FUNCTION update_posts_count() RETURNS TRIGGER
                LANGUAGE plpgsql
                AS $$
                    BEGIN
                        UPDATE users SET posts_count = posts_count + 1 WHERE id = NEW.user_id;
                        UPDATE channels SET posts_count = posts_count + 1 WHERE id = NEW.channel_id;
                        RETURN NEW;
                    END $$;

                CREATE TRIGGER on_insert_post_update_users_and_channels_posts_count
                    AFTER INSERT ON posts
                    FOR EACH ROW EXECUTE PROCEDURE update_posts_count();
        </createProcedure>
        <createProcedure>
            CREATE TRIGGER on_new_upvote_update_user_experience
                AFTER INSERT ON upvotes
                FOR EACH ROW EXECUTE PROCEDURE increment_user_experience();
        </createProcedure>
        <createProcedure>
            CREATE OR REPLACE FUNCTION increment_post_upvotes() RETURNS TRIGGER
                LANGUAGE plpgsql
                AS $$
            BEGIN
                UPDATE posts SET upvote_count = upvote_count + 1 WHERE id = NEW.post_id;
                RETURN NEW;
            END $$;

            CREATE TRIGGER on_insert_upvote_update_posts_update_count
                AFTER INSERT ON upvotes
                FOR EACH ROW EXECUTE PROCEDURE increment_post_upvotes();
        </createProcedure>
    </changeSet>
</databaseChangeLog>
